{"id": "2510.02323", "categories": ["cs.OS", "cs.NI", "cs.PF", "D.4.2; D.4.8; C.2.1; C.2.4"], "pdf": "https://arxiv.org/pdf/2510.02323", "abs": "https://arxiv.org/abs/2510.02323", "authors": ["Joon Yong Hwang", "Chanseo Park", "Ikjun Yeom", "Younghoon Kim"], "title": "NetCAS: Dynamic Cache and Backend Device Management in Networked Environments", "comment": "10 pages, 8 figures, submitted to USENIX FAST 2026", "summary": "Modern storage systems often combine fast cache with slower backend devices\nto accelerate I/O. As performance gaps narrow, concurrently accessing both\ndevices, rather than relying solely on cache hits, can improve throughput.\nHowever, in data centers, remote backend storage accessed over networks suffers\nfrom unpredictable contention, complicating this split. We present NetCAS, a\nframework that dynamically splits I/O between cache and backend devices based\non real-time network feedback and a precomputed Perf Profile. Unlike\ntraditional hit-rate-based policies, NetCAS adapts split ratios to workload\nconfiguration and networking performance. NetCAS employs a low-overhead batched\nround-robin scheduler to enforce splits, avoiding per-request costs. It\nachieves up to 174% higher performance than traditional caching in remote\nstorage environments and outperforms converging schemes like Orthus by up to\n3.5X under fluctuating network conditions."}
{"id": "2510.02878", "categories": ["cs.DC", "cs.MS", "cs.PF"], "pdf": "https://arxiv.org/pdf/2510.02878", "abs": "https://arxiv.org/abs/2510.02878", "authors": ["Massimo Bernaschi", "Alessandro Celestini", "Pasqua D'Ambra", "Giorgio Richelli"], "title": "On the energy efficiency of sparse matrix computations on multi-GPU clusters", "comment": null, "summary": "We investigate the energy efficiency of a library designed for parallel\ncomputations with sparse matrices. The library leverages high-performance,\nenergy-efficient Graphics Processing Unit (GPU) accelerators to enable\nlarge-scale scientific applications. Our primary development objective was to\nmaximize parallel performance and scalability in solving sparse linear systems\nwhose dimensions far exceed the memory capacity of a single node. To this end,\nwe devised methods that expose a high degree of parallelism while optimizing\nalgorithmic implementations for efficient multi-GPU usage. Previous work has\nalready demonstrated the library's performance efficiency on large-scale\nsystems comprising thousands of NVIDIA GPUs, achieving improvements over\nstate-of-the-art solutions. In this paper, we extend those results by providing\nenergy profiles that address the growing sustainability requirements of modern\nHPC platforms. We present our methodology and tools for accurate runtime energy\nmeasurements of the library's core components and discuss the findings. Our\nresults confirm that optimizing GPU computations and minimizing data movement\nacross memory and computing nodes reduces both time-to-solution and energy\nconsumption. Moreover, we show that the library delivers substantial advantages\nover comparable software frameworks on standard benchmarks."}
{"id": "2510.02675", "categories": ["cs.AR", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.02675", "abs": "https://arxiv.org/abs/2510.02675", "authors": ["Shubham Negi", "Kaushik Roy"], "title": "HALO: Memory-Centric Heterogeneous Accelerator with 2.5D Integration for Low-Batch LLM Inference", "comment": null, "summary": "The rapid adoption of Large Language Models (LLMs) has driven a growing\ndemand for efficient inference, particularly in latency-sensitive applications\nsuch as chatbots and personalized assistants. Unlike traditional deep neural\nnetworks, LLM inference proceeds in two distinct phases: the prefill phase,\nwhich processes the full input sequence in parallel, and the decode phase,\nwhich generates tokens sequentially. These phases exhibit highly diverse\ncompute and memory requirements, which makes accelerator design particularly\nchallenging. Prior works have primarily been optimized for high-batch inference\nor evaluated only short input context lengths, leaving the low-batch and long\ncontext regime, which is critical for interactive applications, largely\nunderexplored.\n  We propose HALO, a heterogeneous memory centric accelerator designed for\nthese unique challenges of prefill and decode phases in low-batch LLM\ninference. HALO integrates HBM based Compute-in-DRAM (CiD) with an on-chip\nanalog Compute-in-Memory (CiM), co-packaged using 2.5D integration. To further\nimprove the hardware utilization, we introduce a phase-aware mapping strategy\nthat adapts to the distinct demands of the prefill and decode phases. Compute\nbound operations in the prefill phase are mapped to CiM to exploit its high\nthroughput matrix multiplication capability, while memory-bound operations in\nthe decode phase are executed on CiD to benefit from reduced data movement\nwithin DRAM. Additionally, we present an analysis of the performance tradeoffs\nof LLMs under two architectural extremes: a fully CiD and a fully on-chip\nanalog CiM design to highlight the need for a heterogeneous design. We evaluate\nHALO on LLaMA-2 7B and Qwen3 8B models. Our experimental results show that LLMs\nmapped to HALO achieve up to 18x geometric mean speedup over AttAcc, an\nattention-optimized mapping and 2.5x over CENT, a fully CiD based mapping."}
{"id": "2510.02487", "categories": ["cs.NI", "cs.CR"], "pdf": "https://arxiv.org/pdf/2510.02487", "abs": "https://arxiv.org/abs/2510.02487", "authors": ["Ahmed Danladi Abdullahi", "Erfan Bahrami", "Tooska Dargahi", "Mohammed Al-Khalidi", "Mohammad Hammoudeh"], "title": "Interplay between Security, Privacy and Trust in 6G-enabled Intelligent Transportation Systems", "comment": "Submitted to IEEE Open Journal of Intelligent Transportation Systems\n  (32 pages, 5 figures, 7 tables)", "summary": "The advancement of 6G technology has the potential to revolutionize the\ntransportation sector and significantly improve how we travel. 6G-enabled\nIntelligent Transportation Systems (ITS) promise to offer high-speed,\nlow-latency communication and advanced data analytics capabilities, supporting\nthe development of safer, more efficient, and more sustainable transportation\nsolutions. However, various security and privacy challenges were identified in\nthe literature that must be addressed to enable the safe and secure deployment\nof 6G-ITS and ensure people's trust in using these technologies. This paper\nreviews the opportunities and challenges of 6G-ITS, particularly focusing on\ntrust, security, and privacy, with special attention to quantum technologies\nthat both enhance security through quantum key distribution and introduce new\nvulnerabilities. It discusses the potential benefits of 6G technology in the\ntransportation sector, including improved communication, device\ninteroperability support, data analytic capabilities, and increased automation\nfor different components, such as transportation management and communication\nsystems. A taxonomy of different attack models in 6G-ITS is proposed, and a\ncomparison of the security threats in 5G-ITS and 6G-ITS is provided, along with\npotential mitigating solutions. This research highlights the urgent need for a\ncomprehensive, multi-layered security framework spanning physical\ninfrastructure protection, network protocol security, data management\nsafeguards, application security measures, and trust management systems to\neffectively mitigate emerging security and privacy risks and ensure the\nintegrity and resilience of future transportation ecosystems."}
{"id": "2510.02613", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.02613", "abs": "https://arxiv.org/abs/2510.02613", "authors": ["Gursimran Singh", "Timothy Yu", "Haley Li", "Cheng Chen", "Hanieh Sadri", "Qintao Zhang", "Yu Zhang", "Ying Xiong", "Yong Zhang", "Zhenan Fan"], "title": "ElasticMoE: An Efficient Auto Scaling Method for Mixture-of-Experts Models", "comment": "19 pages, 15 figures, Under Submission", "summary": "Mixture-of-Experts (MoE) models promise efficient scaling of large language\nmodels (LLMs) by activating only a small subset of experts per token, but their\nparallelized inference pipelines make elastic serving challenging. Existing\nstrategies fall short: horizontal scaling provisions entire replicas of the\ncurrent configuration, often tens to hundreds of accelerators, leading to\ncoarse granularity, long provisioning delays, and costly overprovisioning.\nVertical scaling offers finer adjustments but typically requires instance\nrestarts, incurring downtime. These limitations make current approaches\nill-suited for the bursty, short-lived traffic patterns common in cloud\ndeployments.\n  We present ElasticMoE, an elastic scaling framework for MoE LLMs that\nachieves fine-grained, low-latency, and zero-downtime scaling. ElasticMoE\ndecouples inference execution from memory operations, enabling scaling steps to\nproceed concurrently with serving. An HBM Management Module (HMM) reuses\nweights and KV caches via zero-copy remapping, while high-bandwidth\npeer-to-peer transfers bring newly added accelerators online without\ninterrupting service. A virtual memory based expert redistribution mechanism\nmigrates MoE experts without costly buffer reallocations, reducing peak memory\nusage during expert parallelism reconfiguration.\n  Our evaluation on Ascend NPUs with three popular MoE LLMs shows that\nElasticMoE achieves up to 9x lower scale-up latency, up to 2x better throughput\nduring scaling, and significantly improves SLO attainment compared to\nbaselines. By enabling fine-grained, concurrent scaling with minimal\ndisruption, ElasticMoE advances the practicality of deploying massive MoE LLMs\nin dynamic cloud environments."}
{"id": "2510.02387", "categories": ["cs.SE", "cs.AI", "cs.LG", "68T07", "I.2.7"], "pdf": "https://arxiv.org/pdf/2510.02387", "abs": "https://arxiv.org/abs/2510.02387", "authors": ["FAIR CodeGen team", "Quentin Carbonneaux", "Gal Cohen", "Jonas Gehring", "Jacob Kahn", "Jannik Kossen", "Felix Kreuk", "Emily McMilin", "Michel Meyer", "Yuxiang Wei", "David Zhang", "Kunhao Zheng", "Jordi Armengol-Estapé", "Pedram Bashiri", "Maximilian Beck", "Pierre Chambon", "Abhishek Charnalia", "Chris Cummins", "Juliette Decugis", "Zacharias V. Fisches", "François Fleuret", "Fabian Gloeckle", "Alex Gu", "Michael Hassid", "Daniel Haziza", "Badr Youbi Idrissi", "Christian Keller", "Rahul Kindi", "Hugh Leather", "Gallil Maimon", "Aram Markosyan", "Francisco Massa", "Pierre-Emmanuel Mazaré", "Vegard Mella", "Naila Murray", "Keyur Muzumdar", "Peter O'Hearn", "Matteo Pagliardini", "Dmitrii Pedchenko", "Tal Remez", "Volker Seeker", "Marco Selvi", "Oren Sultan", "Sida Wang", "Luca Wehrstedt", "Ori Yoran", "Lingming Zhang", "Taco Cohen", "Yossi Adi", "Gabriel Synnaeve"], "title": "CWM: An Open-Weights LLM for Research on Code Generation with World Models", "comment": "58 pages", "summary": "We release Code World Model (CWM), a 32-billion-parameter open-weights LLM,\nto advance research on code generation with world models. To improve code\nunderstanding beyond what can be learned from training on static code alone, we\nmid-train CWM on a large amount of observation-action trajectories from Python\ninterpreter and agentic Docker environments, and perform extensive multi-task\nreasoning RL in verifiable coding, math, and multi-turn software engineering\nenvironments. With CWM, we provide a strong testbed for researchers to explore\nthe opportunities world modeling affords for improving code generation with\nreasoning and planning in computational environments. We present first steps of\nhow world models can benefit agentic coding, enable step-by-step simulation of\nPython code execution, and show early results of how reasoning can benefit from\nthe latter. CWM is a dense, decoder-only LLM trained with a context size of up\nto 131k tokens. Independent of its world modeling capabilities, CWM offers\nstrong performance on general coding and math tasks: it reaches pass@1 scores\nof 65.8% on SWE-bench Verified (with test-time scaling), 68.6% on\nLiveCodeBench, 96.6% on Math-500, and 76.0% on AIME 2024. To support further\nresearch on code world modeling, we release model checkpoints after\nmid-training, SFT, and RL."}
{"id": "2510.02863", "categories": ["cs.AR", "cs.DS", "cs.NA", "math.NA", "quant-ph", "G.1.3; J.2; B.6.1"], "pdf": "https://arxiv.org/pdf/2510.02863", "abs": "https://arxiv.org/abs/2510.02863", "authors": ["D. A. Herrera-Martí", "E. Guthmuller", "J. Fereyre"], "title": "A Hardware Accelerator for the Goemans-Williamson Algorithm", "comment": "Impact of Extended Precision Arithmetic in Interior Point Methods\n  using Conjugate Gradient. 10 pages. Hardware estimates", "summary": "The combinatorial problem Max-Cut has become a benchmark in the evaluation of\nlocal search heuristics for both quantum and classical optimisers. In contrast\nto local search, which only provides average-case performance guarantees, the\nconvex semidefinite relaxation of Max-Cut by Goemans and Williamson, provides\nworst-case guarantees and is therefore suited to both the construction of\nbenchmarks and in applications to performance-critic scenarios.\n  We show how extended floating point precision can be incorporated in\nalgebraic subroutines in convex optimisation, namely in indirect matrix\ninversion methods like Conjugate Gradient, which are used in Interior Point\nMethods in the case of very large problem sizes. Also, an estimate is provided\nof the expected acceleration of the time to solution for a hardware\narchitecture that runs natively on extended precision. Specifically, when using\nindirect matrix inversion methods like Conjugate Gradient, which have lower\ncomplexity than direct methods and are therefore used in very large problems,\nwe see that increasing the internal working precision reduces the time to\nsolution by a factor that increases with the system size."}
{"id": "2510.02682", "categories": ["cs.NI"], "pdf": "https://arxiv.org/pdf/2510.02682", "abs": "https://arxiv.org/abs/2510.02682", "authors": ["Haoran Wan", "Kyle Jamieson"], "title": "L4Span: Spanning Congestion Signaling over NextG Networks for Interactive Applications", "comment": null, "summary": "Design for low latency networking is essential for tomorrow's interactive\napplications, but it is essential to deploy incrementally and universally at\nthe network's last mile. While wired broadband ISPs are rolling out the leading\nqueue occupancy signaling mechanisms, the cellular Radio Access Network (RAN),\nanother important last mile to many users, lags behind these efforts. This\npaper proposes a new RAN design, L4Span, that abstracts the complexities of RAN\nqueueing in a simple interface, thus tying the queue state of the RAN to\nend-to-end low-latency signaling all the way back to the content server. At\nmillisecond-level timescales, L4Span predicts the RAN's queuing occupancy and\nperforms ECN marking for both low-latency and classic flows. L4Span is\nlightweight, requiring minimal RAN modifications, and remains 3GPP and O-RAN\ncompliant for maximum ease of deployment. We implement a prototype on the\nsrsRAN open-source software in C++. Our evaluation compares the performance of\nlow-latency as well as classic flows with or without the deployment of L4Span\nin various wireless channel conditions. Results show that L4Span reduces the\none-way delay of both low-latency and classic flows by up to 98 %, while\nsimultaneously maintaining near line-rate throughput. The code is available at\nhttps://github.com/PrincetonUniversity/L4Span."}
{"id": "2510.02774", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.02774", "abs": "https://arxiv.org/abs/2510.02774", "authors": ["Xiang Li", "Qiong Chang", "Yun Li", "Jun Miyazaki"], "title": "GRNND: A GPU-Parallel Relative NN-Descent Algorithm for Efficient Approximate Nearest Neighbor Graph Construction", "comment": null, "summary": "Relative Nearest Neighbor Descent (RNN-Descent) is a state-of-the-art\nalgorithm for constructing sparse approximate nearest neighbor (ANN) graphs by\ncombining the iterative refinement of NN-Descent with the edge-pruning rules of\nthe Relative Neighborhood Graph (RNG). It has demonstrated strong effectiveness\nin large-scale search tasks such as information retrieval and related tasks.\nHowever, as the amount and dimensionality of data increase, the complexity of\ngraph construction in RNN-Descent rises sharply, making this stage increasingly\ntime-consuming and even prohibitive for subsequent query processing. In this\npaper, we propose GRNND, the first GPU-parallel algorithm of RNN-Descent\ndesigned to fully exploit GPU architecture. GRNND introduces a disordered\nneighbor propagation strategy to mitigate synchronized update traps, enhancing\nstructural diversity, and avoiding premature convergence during parallel\nexecution. It also leverages warp-level cooperative operations and a\ndouble-buffered neighbor pool with fixed capacity for efficient memory access,\neliminate contention, and enable highly parallelized neighbor updates.\nExtensive experiments demonstrate that GRNND consistently outperforms existing\nCPU- and GPU-based methods. GRNND achieves 2.4 to 51.7x speedup over existing\nGPU methods, and 17.8 to 49.8x speedup over CPU methods."}
{"id": "2510.02389", "categories": ["cs.SE", "cs.CR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.02389", "abs": "https://arxiv.org/abs/2510.02389", "authors": ["Haoran Xi", "Minghao Shao", "Brendan Dolan-Gavitt", "Muhammad Shafique", "Ramesh Karri"], "title": "From Trace to Line: LLM Agent for Real-World OSS Vulnerability Localization", "comment": null, "summary": "Large language models show promise for vulnerability discovery, yet\nprevailing methods inspect code in isolation, struggle with long contexts, and\nfocus on coarse function- or file-level detections - offering limited\nactionable guidance to engineers who need precise line-level localization and\ntargeted patches in real-world software development. We present T2L-Agent\n(Trace-to-Line Agent), a project-level, end-to-end framework that plans its own\nanalysis and progressively narrows scope from modules to exact vulnerable\nlines. T2L-Agent couples multi-round feedback with an Agentic Trace Analyzer\n(ATA) that fuses runtime evidence - crash points, stack traces, and coverage\ndeltas - with AST-based code chunking, enabling iterative refinement beyond\nsingle pass predictions and translating symptoms into actionable, line-level\ndiagnoses. To benchmark line-level vulnerability discovery, we introduce\nT2L-ARVO, a diverse, expert-verified 50-case benchmark spanning five crash\nfamilies and real-world projects. T2L-ARVO is specifically designed to support\nboth coarse-grained detection and fine-grained localization, enabling rigorous\nevaluation of systems that aim to move beyond file-level predictions. On\nT2L-ARVO, T2L-Agent achieves up to 58.0% detection and 54.8% line-level\nlocalization, substantially outperforming baselines. Together, the framework\nand benchmark push LLM-based vulnerability detection from coarse identification\ntoward deployable, robust, precision diagnostics that reduce noise and\naccelerate patching in open-source software workflows."}
{"id": "2510.02990", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2510.02990", "abs": "https://arxiv.org/abs/2510.02990", "authors": ["Philippe Magalhães", "Virginie Fresse", "Benoît Suffran", "Olivier Alata"], "title": "A Resource-Driven Approach for Implementing CNNs on FPGAs Using Adaptive IPs", "comment": "HiPEAC Workshop on Reconfigurable Computing (WRC), Jan 2025,\n  Barcelona, Spain", "summary": "The increasing demand for real-time, low-latency artificial intelligence\napplications has propelled the use of Field-Programmable Gate Arrays (FPGAs)\nfor Convolutional Neural Network (CNN) implementations. FPGAs offer\nreconfigurability, energy efficiency, and performance advantages over GPUs,\nmaking them suitable for edge devices and embedded systems. This work presents\na novel library of resource-efficient convolution IPs designed to automatically\nadapt to the available FPGA resources. Developed in VHDL, these IPs are\nparameterizable and utilize fixed-point arithmetic for optimal performance.\nFour IPs are introduced, each tailored to specific resource constraints,\noffering flexibility in DSP usage, logic consumption, and precision.\nExperimental results on a Zynq UltraScale+ FPGA highlight the trade-offs\nbetween performance and resource usage. The comparison with recent FPGA-based\nCNN acceleration techniques emphasizes the versatility and independence of this\napproach from specific FPGA architectures or technological advancements. Future\nwork will expand the library to include pooling and activation functions,\nenabling broader applicability and integration into CNN frameworks."}
{"id": "2510.02800", "categories": ["cs.NI", "eess.SP"], "pdf": "https://arxiv.org/pdf/2510.02800", "abs": "https://arxiv.org/abs/2510.02800", "authors": ["Rohith Reddy Vennam", "Maiyun Zhang", "Raghav Subbaraman", "Deepak Vashist", "Dinesh Bharadia"], "title": "FSMA: Scalable and Reliable LoRa for Non-Terrestrial Networks with Mobile Gateways", "comment": "14 pages, 19 figures", "summary": "The proliferation of Low Earth Orbit (LEO) satellites for universal IoT\napplications and the growing use of drones in emergency services, agriculture,\nand military operations highlight the transformative potential of\nnon-terrestrial networks (NTN). However, these networks face two key\nchallenges: (1) large coverage footprints that create frequent collisions and\n(2) moving gateways that cause dynamic links and demand synchronization-free,\nlink-aware transmissions. Existing random access schemes such as ALOHA, CSMA,\nand BSMA fail in this setting, suffering from high collision rates, hidden\nterminals, or excessive gateway energy overhead. We propose Free Signal\nMultiple Access (FSMA), a gateway-controlled protocol that introduces a\nlightweight free signal chirp (FreeChirp). FreeChirp ensures that nodes\ntransmit only when the channel is idle and when links are reliable, thereby\nreducing collisions and enabling link-aware access without the need for\nsynchronization or complex scheduling. We evaluate FSMA using 25 commercial\nLoRa devices with a drone-mounted moving gateway and demonstrate up to 2x\nhigher throughput, 2x to 5x better packet reception ratio, and 5x improved\nenergy efficiency compared to the baselines. Large-scale simulations with a\ncustom Satellite IoT Simulator further show that FSMA scales to 5000+ devices\nper satellite pass. These results establish FSMA as a practical step toward\nscalable, energy-efficient, and reliable NTN IoT networks."}
{"id": "2510.02838", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.02838", "abs": "https://arxiv.org/abs/2510.02838", "authors": ["Yifei Xia", "Fangcheng Fu", "Hao Yuan", "Hanke Zhang", "Xupeng Miao", "Yijun Liu", "Suhan Ling", "Jie Jiang", "Bin Cui"], "title": "TridentServe: A Stage-level Serving System for Diffusion Pipelines", "comment": null, "summary": "Diffusion pipelines, renowned for their powerful visual generation\ncapabilities, have seen widespread adoption in generative vision tasks (e.g.,\ntext-to-image/video). These pipelines typically follow an\nencode--diffuse--decode three-stage architecture. Current serving systems\ndeploy diffusion pipelines within a static, manual, and pipeline-level\nparadigm, allocating the same resources to every request and stage. However,\nthrough an in-depth analysis, we find that such a paradigm is inefficient due\nto the discrepancy in resource needs across the three stages of each request,\nas well as across different requests. Following the analysis, we propose the\ndynamic stage-level serving paradigm and develop TridentServe, a brand new\ndiffusion serving system. TridentServe automatically, dynamically derives the\nplacement plan (i.e., how each stage resides) for pipeline deployment and the\ndispatch plan (i.e., how the requests are routed) for request processing,\nco-optimizing the resource allocation for both model and requests. Extensive\nexperiments show that TridentServe consistently improves SLO attainment and\nreduces average/P95 latencies by up to 2.5x and 3.6x/4.1x over existing works\nacross a variety of workloads."}
{"id": "2510.02393", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.02393", "abs": "https://arxiv.org/abs/2510.02393", "authors": ["Jianqing Zhang", "Wei Xia", "Hande Dong", "Qiang Lin", "Jian Cao"], "title": "AP2O: Correcting LLM-Generated Code Errors Type by Type Like Humans via Adaptive Progressive Preference Optimization", "comment": null, "summary": "LLMs' code generation capabilities have yielded substantial improvements in\nthe effectiveness of programming tasks. However, LLM-generated code still\nsuffers from compilation and runtime errors. Existing offline preference\noptimization methods primarily focus on enhancing LLMs' coding abilities using\npass/fail signals in the preference data, overlooking the deep-level error\ntypes in the failed codes. To address this, we propose Adaptively Progressive\nPreference Optimization (AP2O) for coding (i.e., AP2O-Coder), a method that\nguides LLMs adaptively and methodically to reduce code errors for code\ngeneration. Specifically, we construct an error notebook from failed codes and\nprogressively optimize the LLM to correct errors type by type. Furthermore, we\nadaptively replay error types to tailor to the LLM's changing weaknesses\nthroughout the training process. Through extensive experiments on both code and\ngeneral LLMs (Llama, Qwen, and DeepSeek series) with parameters ranging from\n0.5B to 34B, our AP2O-Coder improves code generation performance by up to 3% in\npass@k while using less preference data. Code: https://github.com/TsingZ0/AP2O"}
{"id": "2510.02895", "categories": ["cs.NI"], "pdf": "https://arxiv.org/pdf/2510.02895", "abs": "https://arxiv.org/abs/2510.02895", "authors": ["Akihisa Takahashi", "Yoshito Tobe"], "title": "DH-EAC: Design of a Dynamic, Hierarchical Entanglement Access Control Protocol", "comment": null, "summary": "We propose Dynamic, Hierarchical Entanglement Access Control (DH-EAC), a\npure-quantum protocol for fair and anonymous allocation of scarce entanglement\nacross wide-area quantum networks composed of many quantum LANs (QLANs). Prior\nDicke-state-based pure-quantum MACs resolve contention by local measurements\nwithout classical signaling, but they mainly target a single QLAN under static\nconditions; extending them to wide-area, dynamic settings while avoiding\npost-selection reconciliation remains open. DH-EAC adopts a two-layer\npure-quantum lottery: the outer layer selects winning QLANs and the inner layer\nselects winning nodes within each winning QLAN. A key design principle is that\nboth the winning set and the per-QLAN quota are fixed by measurements alone, so\nthe contention loop requires no classical round trip. The protocol thus aims to\njointly satisfy anonymity (no node IDs revealed until decisions are fixed) and\nfairness (bias suppression under heterogeneous QLAN sizes). We also provide\nanalytical models for success probability and latency under a standard i.i.d.\nloss model, and we evaluate DH-EAC against two baselines - single-layer Dicke\nwithin one QLAN and a classical GO-driven allocator - using a minimal,\nreproducible set of scenarios. Metrics include success probability, end-to-end\nlatency, throughput, and Jain's fairness index. The results indicate that\nDH-EAC offers an implementable design point in the space of entanglement access\ncontrol, balancing pure-quantum contention resolution, anonymity, and\nscalability for multi-QLAN networks."}
{"id": "2510.02878", "categories": ["cs.DC", "cs.MS", "cs.PF"], "pdf": "https://arxiv.org/pdf/2510.02878", "abs": "https://arxiv.org/abs/2510.02878", "authors": ["Massimo Bernaschi", "Alessandro Celestini", "Pasqua D'Ambra", "Giorgio Richelli"], "title": "On the energy efficiency of sparse matrix computations on multi-GPU clusters", "comment": null, "summary": "We investigate the energy efficiency of a library designed for parallel\ncomputations with sparse matrices. The library leverages high-performance,\nenergy-efficient Graphics Processing Unit (GPU) accelerators to enable\nlarge-scale scientific applications. Our primary development objective was to\nmaximize parallel performance and scalability in solving sparse linear systems\nwhose dimensions far exceed the memory capacity of a single node. To this end,\nwe devised methods that expose a high degree of parallelism while optimizing\nalgorithmic implementations for efficient multi-GPU usage. Previous work has\nalready demonstrated the library's performance efficiency on large-scale\nsystems comprising thousands of NVIDIA GPUs, achieving improvements over\nstate-of-the-art solutions. In this paper, we extend those results by providing\nenergy profiles that address the growing sustainability requirements of modern\nHPC platforms. We present our methodology and tools for accurate runtime energy\nmeasurements of the library's core components and discuss the findings. Our\nresults confirm that optimizing GPU computations and minimizing data movement\nacross memory and computing nodes reduces both time-to-solution and energy\nconsumption. Moreover, we show that the library delivers substantial advantages\nover comparable software frameworks on standard benchmarks."}
{"id": "2510.02404", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.02404", "abs": "https://arxiv.org/abs/2510.02404", "authors": ["Siddharth Agarwal", "Maria A. Rodriguez", "Rajkumar Buyya"], "title": "Dynamic Function Configuration and its Management in Serverless Computing: A Taxonomy and Future Directions", "comment": "34 pages, 2 figures, 2 tables, journal", "summary": "The serverless cloud computing model offers a framework where the service\nprovider abstracts the underlying infrastructure management from developers. In\nthis serverless model, FaaS provides an event-driven, function-oriented\ncomputing service characterised by fine-grained, usage-based pricing that\neliminates cost for idle resources. Platforms like AWS Lambda, Azure Functions,\nand Cloud Run Functions require developers to configure their function(s) with\nminimum operational resources for its successful execution. This resource\nallocation influences both the operational expense and the performance quality\nof these functions. However, a noticeable lack of platform transparency forces\ndevelopers to rely on expert knowledge or experience-based ad-hoc decisions to\nrequest desired function resources. This makes optimal resource configuration a\nnon-trivial task while adhering to performance constraints. Furthermore, while\ncommercial platforms often scale resources like CPU and network bandwidth\nproportional to memory, open-source frameworks permit independent configuration\nof function resources, introducing additional complexity for developers aiming\nto optimise their functions. These complexities have directed researchers to\nresolve developer challenges and advance towards an efficient server-less\nexecution model. In this article, we identify different aspects of resource\nconfiguration techniques in FaaS settings and propose a taxonomy of factors\nthat influence function design, configuration, run-time cost, and performance\nguarantees. We conduct an analysis of existing literature on resource\nconfiguration to present a comprehensive review of current studies on function\nconfiguration. We also identify existing research gaps and suggest future\nresearch directions to enhance function configuration and strengthen the\ncapabilities of serverless computing environments to drive its broader\nadoption."}
{"id": "2510.02958", "categories": ["cs.NI"], "pdf": "https://arxiv.org/pdf/2510.02958", "abs": "https://arxiv.org/abs/2510.02958", "authors": ["Muhammad Kabeer", "Rosdiadee Nordin", "Mehran Behjati", "Lau Sian Lun"], "title": "Sequence-Based Deep Learning for Handover Optimization in Dense Urban Cellular Network", "comment": "6 pages, 6 figures, conference", "summary": "Efficient handover management remains a critical challenge in dense urban\ncellular networks, where high cell density, user mobility, and diverse service\ndemands increase the likelihood of unnecessary handovers and ping-pong effects.\nThis paper leverages a real-world, multi-operator drive-test dataset of 30,925\nlabelled records collected within a 2 km area around Sunway City to investigate\nsequence-based deep learning approaches for handover detection and avoidance.\nWe formulate handover prediction as a sequence problem and evaluate Gated\nRecurrent Unit (GRU), Long Short-Term Memory (LSTM), and Transformer\narchitectures under Reference Signal Received Power (RSRP)-only and all-feature\nsettings. The integration of multi-dimensional features significantly enhanced\nhandover performance in dense urban cellular networks. The proposed GRU-based\nmodel achieved a remarkable 98% reduction in ping-pong handovers, alongside a\n46.25% decrease in unnecessary handovers, outperforming the baseline RSRP-only\napproach which yielded a 22.19% reduction. Furthermore, the model demonstrated\na 46% improvement in Time of Stay (ToS), indicating more stable user\nconnections. With an inference time of just 0.91 seconds, the solution proves\nhighly efficient and well-suited for real-time edge deployment scenarios.\nCompared to the conventional 3GPP A3 algorithm, these improvements demonstrate\nsignificant gains in mobility robustness and user Quality of Experience (QoE)\nimprovement. The dataset is released to foster reproducibility and further\nresearch in intelligent mobility management for 5G and beyond."}
{"id": "2510.02882", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.02882", "abs": "https://arxiv.org/abs/2510.02882", "authors": ["Adhitya Bhawiyuga", "Serkan Girgin", "Rolf A. de By", "Raul Zurita-Milla"], "title": "Energy Efficiency in Cloud-Based Big Data Processing for Earth Observation: Gap Analysis and Future Directions", "comment": null, "summary": "Earth observation (EO) data volumes are rapidly increasing. While cloud\ncomputing are now used for processing large EO datasets, the energy efficiency\naspects of such a processing have received much less attention. This issue is\nnotable given the increasing awareness of energy costs and carbon footprint in\nbig data processing, particularly with increased attention on compute-intensive\nfoundation models. In this paper we identify gaps in energy efficiency\npractices within cloud-based EO big data (EOBD) processing and propose several\nresearch directions for improvement. We first examine the current EOBD\nlandscape, focus on the requirements that necessitate cloud-based processing\nand analyze existing cloud-based EOBD solutions. We then investigate energy\nefficiency strategies that have been successfully employed in well-studied big\ndata domains. Through this analysis, we identify several critical gaps in\nexisting EOBD processing platforms, which primarily focus on data accessibility\nand computational feasibility, instead of energy efficiency. These gaps include\ninsufficient energy monitoring mechanisms, lack of energy awareness in data\nmanagement, inadequate implementation of energy-aware resource allocation and\nlack of energy efficiency criteria on task scheduling. Based on these findings,\nwe propose the development of energy-aware performance monitoring and\nbenchmarking frameworks, the use of optimization techniques for infrastructure\norchestration, and of energy-efficient task scheduling approaches for\ndistributed cloud-based EOBD processing frameworks. These proposed approaches\naim to foster more energy awareness in EOBD processing , potentially reducing\npower consumption and environmental impact while maintaining or minimally\nimpacting processing performance."}
{"id": "2510.02504", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.02504", "abs": "https://arxiv.org/abs/2510.02504", "authors": ["Mara Ulloa", "Jenna L. Butler", "Sankeerti Haniyur", "Courtney Miller", "Barrett Amos", "Advait Sarkar", "Margaret-Anne Storey"], "title": "Product Manager Practices for Delegating Work to Generative AI: \"Accountability must not be delegated to non-human actors\"", "comment": "12 pages, 4 figures, 1 table", "summary": "Generative AI (GenAI) is changing the nature of knowledge work, particularly\nfor Product Managers (PMs) in software development teams. While much software\nengineering research has focused on developers' interactions with GenAI, there\nis less understanding of how the work of PMs is evolving due to GenAI. To\naddress this gap, we conducted a mixed-methods study at Microsoft, a large,\nmultinational software company: surveying 885 PMs, analyzing telemetry data for\na subset of PMs (N=731), and interviewing a subset of 15 PMs. We contribute:\n(1) PMs' current GenAI adoption rates, uses cases, and perceived benefits and\nbarriers and; (2) a framework capturing how PMs assess which tasks to delegate\nto GenAI; (3) PMs adaptation practices for integrating GenAI into their roles\nand perceptions of how their role is evolving. We end by discussing\nimplications on the broader GenAI workflow adoption process and software\ndevelopment roles."}
{"id": "2510.03205", "categories": ["cs.NI", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.03205", "abs": "https://arxiv.org/abs/2510.03205", "authors": ["Shenjia Ding", "David Flynn", "Paul Harvey"], "title": "Automatic Generation of Digital Twins for Network Testing", "comment": "Accepted to ANMS at ICDCS 2025", "summary": "The increased use of software in the operation and management of\ntelecommunication networks has moved the industry one step closer to realizing\nautonomous network operation. One consequence of this shift is the\nsignificantly increased need for testing and validation before such software\ncan be deployed. Complementing existing simulation or hardware-based\napproaches, digital twins present an environment to achieve this testing;\nhowever, they require significant time and human effort to configure and\nexecute. This paper explores the automatic generation of digital twins to\nprovide efficient and accurate validation tools, aligned to the ITU-T\nautonomous network architecture's experimentation subsystem. We present\nexperimental results for an initial use case, demonstrating that the approach\nis feasible in automatically creating efficient digital twins with sufficient\naccuracy to be included as part of existing validation pipelines."}
{"id": "2510.02894", "categories": ["cs.DC", "cs.CV"], "pdf": "https://arxiv.org/pdf/2510.02894", "abs": "https://arxiv.org/abs/2510.02894", "authors": ["Jakub Lisowski", "Piotr Tyrakowski", "Szymon Zyguła", "Krzysztof Kaczmarski"], "title": "PyRadiomics-cuda: a GPU-accelerated 3D features extraction from medical images within PyRadiomics", "comment": null, "summary": "PyRadiomics-cuda is a GPU-accelerated extension of the PyRadiomics library,\ndesigned to address the computational challenges of extracting\nthree-dimensional shape features from medical images. By offloading key\ngeometric computations to GPU hardware it dramatically reduces processing times\nfor large volumetric datasets. The system maintains full compatibility with the\noriginal PyRadiomics API, enabling seamless integration into existing AI\nworkflows without code modifications. This transparent acceleration facilitates\nefficient, scalable radiomics analysis, supporting rapid feature extraction\nessential for high-throughput AI pipeline. Tests performed on a typical\ncomputational cluster, budget and home devices prove usefulness in all\nscenarios. PyRadiomics-cuda is implemented in Python and C/CUDA and is freely\navailable under the BSD license at https://github.com/mis-wut/pyradiomics-CUDA\nAdditionally PyRadiomics-cuda test suite is available at\nhttps://github.com/mis-wut/pyradiomics-cuda-data-gen. It provides detailed\nhandbook and sample scripts suited for different kinds of workflows plus\ndetailed installation instructions. The dataset used for testing is available\nat Kaggle\nhttps://www.kaggle.com/datasets/sabahesaraki/kidney-tumor-segmentation-challengekits-19"}
{"id": "2510.02534", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.02534", "abs": "https://arxiv.org/abs/2510.02534", "authors": ["Mohsen Iranmanesh", "Sina Moradi Sabet", "Sina Marefat", "Ali Javidi Ghasr", "Allison Wilson", "Iman Sharafaldin", "Mohammad A. Tayebi"], "title": "ZeroFalse: Improving Precision in Static Analysis with LLMs", "comment": null, "summary": "Static Application Security Testing (SAST) tools are integral to modern\nsoftware development, yet their adoption is undermined by excessive false\npositives that weaken developer trust and demand costly manual triage. We\npresent ZeroFalse, a framework that integrates static analysis with large\nlanguage models (LLMs) to reduce false positives while preserving coverage.\nZeroFalse treats static analyzer outputs as structured contracts, enriching\nthem with flow-sensitive traces, contextual evidence, and CWE-specific\nknowledge before adjudication by an LLM. This design preserves the systematic\nreach of static analysis while leveraging the reasoning capabilities of LLMs.\nWe evaluate ZeroFalse across both benchmarks and real-world projects using ten\nstate-of-the-art LLMs. Our best-performing models achieve F1-scores of 0.912 on\nthe OWASP Java Benchmark and 0.955 on the OpenVuln dataset, maintaining recall\nand precision above 90%. Results further show that CWE-specialized prompting\nconsistently outperforms generic prompts, and reasoning-oriented LLMs provide\nthe most reliable precision-recall balance. These findings position ZeroFalse\nas a practical and scalable approach for enhancing the reliability of SAST and\nsupporting its integration into real-world CI/CD pipelines."}
{"id": "2510.02323", "categories": ["cs.OS", "cs.NI", "cs.PF", "D.4.2; D.4.8; C.2.1; C.2.4"], "pdf": "https://arxiv.org/pdf/2510.02323", "abs": "https://arxiv.org/abs/2510.02323", "authors": ["Joon Yong Hwang", "Chanseo Park", "Ikjun Yeom", "Younghoon Kim"], "title": "NetCAS: Dynamic Cache and Backend Device Management in Networked Environments", "comment": "10 pages, 8 figures, submitted to USENIX FAST 2026", "summary": "Modern storage systems often combine fast cache with slower backend devices\nto accelerate I/O. As performance gaps narrow, concurrently accessing both\ndevices, rather than relying solely on cache hits, can improve throughput.\nHowever, in data centers, remote backend storage accessed over networks suffers\nfrom unpredictable contention, complicating this split. We present NetCAS, a\nframework that dynamically splits I/O between cache and backend devices based\non real-time network feedback and a precomputed Perf Profile. Unlike\ntraditional hit-rate-based policies, NetCAS adapts split ratios to workload\nconfiguration and networking performance. NetCAS employs a low-overhead batched\nround-robin scheduler to enforce splits, avoiding per-request costs. It\nachieves up to 174% higher performance than traditional caching in remote\nstorage environments and outperforms converging schemes like Orthus by up to\n3.5X under fluctuating network conditions."}
{"id": "2510.02930", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.02930", "abs": "https://arxiv.org/abs/2510.02930", "authors": ["Wen Guan", "Tadashi Maeno", "Aleksandr Alekseev", "Fernando Harald Barreiro Megino", "Kaushik De", "Edward Karavakis", "Alexei Klimentov", "Tatiana Korchuganova", "FaHui Lin", "Paul Nilsson", "Torre Wenaus", "Zhaoyu Yang", "Xin Zhao"], "title": "iDDS: Intelligent Distributed Dispatch and Scheduling for Workflow Orchestration", "comment": null, "summary": "The intelligent Distributed Dispatch and Scheduling (iDDS) service is a\nversatile workflow orchestration system designed for large-scale, distributed\nscientific computing. iDDS extends traditional workload and data management by\nintegrating data-aware execution, conditional logic, and programmable\nworkflows, enabling automation of complex and dynamic processing pipelines.\nOriginally developed for the ATLAS experiment at the Large Hadron Collider,\niDDS has evolved into an experiment-agnostic platform that supports both\ntemplate-driven workflows and a Function-as-a-Task model for Python-based\norchestration.\n  This paper presents the architecture and core components of iDDS,\nhighlighting its scalability, modular message-driven design, and integration\nwith systems such as PanDA and Rucio. We demonstrate its versatility through\nreal-world use cases: fine-grained tape resource optimization for ATLAS,\norchestration of large Directed Acyclic Graph (DAG) workflows for the Rubin\nObservatory, distributed hyperparameter optimization for machine learning\napplications, active learning for physics analyses, and AI-assisted detector\ndesign at the Electron-Ion Collider.\n  By unifying workload scheduling, data movement, and adaptive decision-making,\niDDS reduces operational overhead and enables reproducible, high-throughput\nworkflows across heterogeneous infrastructures. We conclude with current\nchallenges and future directions, including interactive, cloud-native, and\nserverless workflow support."}
{"id": "2510.02585", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.02585", "abs": "https://arxiv.org/abs/2510.02585", "authors": ["Majid Dashtbani", "Ladan Tahvildari"], "title": "Key Considerations for Auto-Scaling: Lessons from Benchmark Microservices", "comment": null, "summary": "Microservices have become the dominant architectural paradigm for building\nscalable and modular cloud-native systems. However, achieving effective\nauto-scaling in such systems remains a non-trivial challenge, as it depends not\nonly on advanced scaling techniques but also on sound design, implementation,\nand deployment practices. Yet, these foundational aspects are often overlooked\nin existing benchmarks, making it difficult to evaluate autoscaling methods\nunder realistic conditions. In this paper, we identify a set of practical\nauto-scaling considerations by applying several state-of-the-art autoscaling\nmethods to widely used microservice benchmarks. To structure these findings, we\nclassify the issues based on when they arise during the software lifecycle:\nArchitecture, Implementation, and Deployment. The Architecture phase covers\nhigh-level decisions such as service decomposition and inter-service\ndependencies. The Implementation phase includes aspects like initialization\noverhead, metrics instrumentation, and error propagation. The Deployment phase\nfocuses on runtime configurations such as resource limits and health checks. We\nvalidate these considerations using the Sock-Shop benchmark and evaluate\ndiverse auto-scaling strategies, including threshold-based, control-theoretic,\nlearning-based, black-box optimization, and dependency-aware approaches. Our\nfindings show that overlooking key lifecycle concerns can degrade autoscaler\nperformance, while addressing them leads to more stable and efficient scaling.\nThese results underscore the importance of lifecycle-aware engineering for\nunlocking the full potential of auto-scaling in microservice-based systems."}
{"id": "2510.02609", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.02609", "abs": "https://arxiv.org/abs/2510.02609", "authors": ["Chengquan Guo", "Chulin Xie", "Yu Yang", "Zhaorun Chen", "Zinan Lin", "Xander Davies", "Yarin Gal", "Dawn Song", "Bo Li"], "title": "RedCodeAgent: Automatic Red-teaming Agent against Diverse Code Agents", "comment": null, "summary": "Code agents have gained widespread adoption due to their strong code\ngeneration capabilities and integration with code interpreters, enabling\ndynamic execution, debugging, and interactive programming capabilities. While\nthese advancements have streamlined complex workflows, they have also\nintroduced critical safety and security risks. Current static safety benchmarks\nand red-teaming tools are inadequate for identifying emerging real-world risky\nscenarios, as they fail to cover certain boundary conditions, such as the\ncombined effects of different jailbreak tools. In this work, we propose\nRedCodeAgent, the first automated red-teaming agent designed to systematically\nuncover vulnerabilities in diverse code agents. With an adaptive memory module,\nRedCodeAgent can leverage existing jailbreak knowledge, dynamically select the\nmost effective red-teaming tools and tool combinations in a tailored toolbox\nfor a given input query, thus identifying vulnerabilities that might otherwise\nbe overlooked. For reliable evaluation, we develop simulated sandbox\nenvironments to additionally evaluate the execution results of code agents,\nmitigating potential biases of LLM-based judges that only rely on static code.\nThrough extensive evaluations across multiple state-of-the-art code agents,\ndiverse risky scenarios, and various programming languages, RedCodeAgent\nconsistently outperforms existing red-teaming methods, achieving higher attack\nsuccess rates and lower rejection rates with high efficiency. We further\nvalidate RedCodeAgent on real-world code assistants, e.g., Cursor and Codeium,\nexposing previously unidentified security risks. By automating and optimizing\nred-teaming processes, RedCodeAgent enables scalable, adaptive, and effective\nsafety assessments of code agents."}
{"id": "2510.02634", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.02634", "abs": "https://arxiv.org/abs/2510.02634", "authors": ["Hanlong Wan", "Weili Xu", "Michael Rosenberg", "Jian Zhang", "Aysha Siddika"], "title": "Automatic Building Code Review: A Case Study", "comment": null, "summary": "Building officials, particularly those in resource-constrained or rural\njurisdictions, face labor-intensive, error-prone, and costly manual reviews of\ndesign documents as projects increase in size and complexity. The growing\nadoption of Building Information Modeling (BIM) and Large Language Models\n(LLMs) presents opportunities for automated code review (ACR) solutions. This\nstudy introduces a novel agent-driven framework that integrates BIM-based data\nextraction with automated verification using both retrieval-augmented\ngeneration (RAG) and Model Context Protocol (MCP) agent pipelines. The\nframework employs LLM-enabled agents to extract geometry, schedules, and system\nattributes from heterogeneous file types, which are then processed for building\ncode checking through two complementary mechanisms: (1) direct API calls to the\nUS Department of Energy COMcheck engine, providing deterministic and\naudit-ready outputs, and (2) RAG-based reasoning over rule provisions, enabling\nflexible interpretation where coverage is incomplete or ambiguous.\n  The framework was evaluated through case demonstrations, including automated\nextraction of geometric attributes (such as surface area, tilt, and insulation\nvalues), parsing of operational schedules, and validation of lighting\nallowances under ASHRAE Standard 90.1-2022. Comparative performance tests\nacross multiple LLMs showed that GPT-4o achieved the best balance of efficiency\nand stability, while smaller models exhibited inconsistencies or failures.\nResults confirm that MCP agent pipelines outperform RAG reasoning pipelines in\nrigor and reliability. This work advances ACR research by demonstrating a\nscalable, interoperable, and production-ready approach that bridges BIM with\nauthoritative code review tools."}
{"id": "2510.02718", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.02718", "abs": "https://arxiv.org/abs/2510.02718", "authors": ["Ali Ghanbari", "Sasan Tavakkol"], "title": "Using Fourier Analysis and Mutant Clustering to Accelerate DNN Mutation Testing", "comment": "2025 40th IEEE/ACM International Conference on Automated Software\n  Engineering (ASE)", "summary": "Deep neural network (DNN) mutation analysis is a promising approach to\nevaluating test set adequacy. Due to the large number of generated mutants that\nmust be tested on large datasets, mutation analysis is costly. In this paper,\nwe present a technique, named DM#, for accelerating DNN mutation testing using\nFourier analysis. The key insight is that DNN outputs are real-valued functions\nsuitable for Fourier analysis that can be leveraged to quantify mutant behavior\nusing only a few data points. DM# uses the quantified mutant behavior to\ncluster the mutants so that the ones with similar behavior fall into the same\ngroup. A representative from each group is then selected for testing, and the\nresult of the test, e.g., whether the mutant is killed or survived, is reused\nfor all other mutants represented by the selected mutant, obviating the need\nfor testing other mutants. 14 DNN models of sizes ranging from thousands to\nmillions of parameters, trained on different datasets, are used to evaluate DM#\nand compare it to several baseline techniques. Our results provide empirical\nevidence on the effectiveness of DM# in accelerating mutation testing by\n28.38%, on average, at the average cost of only 0.72% error in mutation score.\nMoreover, on average, DM# incurs 11.78, 15.16, and 114.36 times less mutation\nscore error compared to random mutant selection, boundary sample selection, and\nrandom sample selection techniques, respectively, while generally offering\ncomparable speed-up."}
{"id": "2510.02773", "categories": ["cs.SE", "cs.CR"], "pdf": "https://arxiv.org/pdf/2510.02773", "abs": "https://arxiv.org/abs/2510.02773", "authors": ["Tamjid Al Rahat", "Yanju Chen", "Yu Feng", "Yuan Tian"], "title": "Automated Repair of OpenID Connect Programs (Extended Version)", "comment": "This is an extended version. The original paper is accepted to ASE\n  2025", "summary": "OpenID Connect has revolutionized online authentication based on single\nsign-on (SSO) by providing a secure and convenient method for accessing\nmultiple services with a single set of credentials. Despite its widespread\nadoption, critical security bugs in OpenID Connect have resulted in significant\nfinancial losses and security breaches, highlighting the need for robust\nmitigation strategies. Automated program repair presents a promising solution\nfor generating candidate patches for OpenID implementations. However,\nchallenges such as domain-specific complexities and the necessity for precise\nfault localization and patch verification must be addressed. We propose\nAuthFix, a counterexample-guided repair engine leveraging LLMs for automated\nOpenID bug fixing. AuthFix integrates three key components: fault localization,\npatch synthesis, and patch verification. By employing a novel Petri-net-based\nmodel checker, AuthFix ensures the correctness of patches by effectively\nmodeling interactions. Our evaluation on a dataset of OpenID bugs demonstrates\nthat AuthFix successfully generated correct patches for 17 out of 23 bugs\n(74%), with a high proportion of patches semantically equivalent to\ndeveloper-written fixes."}
{"id": "2510.02854", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.02854", "abs": "https://arxiv.org/abs/2510.02854", "authors": ["Boshuai Ye", "Arif Ali Khan", "Teemu Pihkakoski", "Peng Liang", "Muhammad Azeem Akbar", "Matti Silveri", "Lauri Malmi"], "title": "C2|Q>: A Robust Framework for Bridging Classical and Quantum Software Development", "comment": "46 pages, 8 images, 14 tables, Manuscript submitted to a Journal\n  (2025)", "summary": "Quantum Software Engineering (QSE) is emerging as a critical discipline to\nmake quantum computing accessible to a broader developer community; however,\nmost quantum development environments still require developers to engage with\nlow-level details across the software stack - including problem encoding,\ncircuit construction, algorithm configuration, hardware selection, and result\ninterpretation - making them difficult for classical software engineers to use.\nTo bridge this gap, we present C2|Q>: a hardware-agnostic quantum software\ndevelopment framework that translates classical specifications (code) into\nquantum-executable programs while preserving methodological rigor. The\nframework applies modular software engineering principles by classifying the\nworkflow into three core modules: an encoder that classifies problems, produces\nQuantum-Compatible Formats (QCFs), and constructs quantum circuits, a\ndeployment module that generates circuits and recommends hardware based on\nfidelity, runtime, and cost, and a decoder that interprets quantum outputs into\nclassical solutions. In evaluation, the encoder module achieved a 93.8%\ncompletion rate, the hardware recommendation module consistently selected the\nappropriate quantum devices for workloads scaling up to 56 qubits, and the full\nC2|Q>: workflow successfully processed classical specifications (434 Python\nsnippets and 100 JSON inputs) with completion rates of 93.8% and 100%,\nrespectively. For case study problems executed on publicly available NISQ\nhardware, C2|Q>: reduced the required implementation effort by nearly 40X\ncompared to manual implementations using low-level quantum software development\nkits (SDKs), with empirical runs limited to small- and medium-sized instances\nconsistent with current NISQ capabilities. The open-source implementation of\nC2|Q>: is available at https://github.com/C2-Q/C2Q"}
{"id": "2510.02887", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.02887", "abs": "https://arxiv.org/abs/2510.02887", "authors": ["Zhao Zhang", "Qingyuan Liang", "Zeyu Sun", "Yizhou Chen", "Guoqing Wang", "Yican Sun", "Lu Zhang", "Ge Li", "Yingfei Xiong"], "title": "GramTrans: A Better Code Representation Approach in Code Generation", "comment": null, "summary": "Code generation has shown great promise in assisting software development. A\nfundamental yet underexplored question is how the choice of code representation\naffects model performance. While existing studies employ various\nrepresentations, such as treating code as plain text, grammar rule sequences,\nor syntax tree sequences, they lack a principled understanding of the\nrelationship between parsing difficulty and model effectiveness. This paper\nproposes a conjecture: the easier a representation is to parse, the better\nperformance the model achieves. We formalize this idea using grammar classes,\nwhere representations in simpler classes (e.g., LL(1)) are easier to parse.\nThrough a controlled experiment on a Python-based DSL, we show that parsing\ndifficulty strongly correlates with model performance. Motivated by this\nfinding, we present GramTrans, a general approach that automatically transforms\na context-free language into a representation within the LL(1) class. GramTrans\nintroduces a novel hierarchical conflict elimination algorithm, enabling a\nflexible trade-off between syntactic simplicity and token efficiency. We\nevaluate GramTrans on both Python and Java using three code generation models:\nStarCoder 1B, DeepSeek-Coder 1.3B, and Qwen2.5 1.5B. Across multiple\nbenchmarks, GramTrans consistently delivers significant improvements over\nbaseline representations. Furthermore, our analysis of existing representations\nreconfirms the strong alignment between parsing difficulty and model\nperformance, providing additional support for the conjecture."}
{"id": "2510.02917", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.02917", "abs": "https://arxiv.org/abs/2510.02917", "authors": ["Kriz Tahimic", "Charibeth Cheng"], "title": "Mechanistic Interpretability of Code Correctness in LLMs via Sparse Autoencoders", "comment": null, "summary": "As Large Language Models become integral to software development, with\nsubstantial portions of AI-suggested code entering production, understanding\ntheir internal correctness mechanisms becomes critical for safe deployment. We\napply sparse autoencoders to decompose LLM representations, identifying\ndirections that correspond to code correctness. We select predictor directions\nusing t-statistics and steering directions through separation scores from base\nmodel representations, then analyze their mechanistic properties through\nsteering, attention analysis, and weight orthogonalization. We find that code\ncorrectness directions in LLMs reliably predict incorrect code, while\ncorrection capabilities, though statistically significant, involve tradeoffs\nbetween fixing errors and preserving correct code. Mechanistically, successful\ncode generation depends on attending to test cases rather than problem\ndescriptions. Moreover, directions identified in base models retain their\neffectiveness after instruction-tuning, suggesting code correctness mechanisms\nlearned during pre-training are repurposed during fine-tuning. Our mechanistic\ninsights suggest three practical applications: prompting strategies should\nprioritize test examples over elaborate problem descriptions, predictor\ndirections can serve as error alarms for developer review, and these same\npredictors can guide selective steering, intervening only when errors are\nanticipated to prevent the code corruption from constant steering."}
{"id": "2510.02934", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.02934", "abs": "https://arxiv.org/abs/2510.02934", "authors": ["Thanh Trong Vu", "Tuan-Dung Bui", "Thu-Trang Nguyen", "Son Nguyen", "Hieu Dinh Vo"], "title": "Model-Agnostic Correctness Assessment for LLM-Generated Code via Dynamic Internal Representation Selection", "comment": null, "summary": "Large Language Models (LLMs) have demonstrated impressive capabilities in\ncode generation and are increasingly integrated into the software development\nprocess. However, ensuring the correctness of LLM-generated code remains a\ncritical concern. Prior work has shown that the internal representations of\nLLMs encode meaningful signals for assessing code correctness. Nevertheless,\nthe existing methods rely on representations from pre-selected/fixed layers and\ntoken positions, which could limit its generalizability across diverse model\narchitectures and tasks. In this work, we introduce AUTOPROBE, a novel\nmodel-agnostic approach that dynamically selects the most informative internal\nrepresentations for code correctness assessment. AUTOPROBE employs an\nattention-based mechanism to learn importance scores for hidden states,\nenabling it to focus on the most relevant features. These weighted\nrepresentations are then aggregated and passed to a probing classifier to\npredict code correctness across multiple dimensions, including compilability,\nfunctionality, and security. To evaluate the performance of AUTOPROBE, we\nconduct extensive experiments across multiple benchmarks and code LLMs. Our\nexperimental results show that AUTOPROBE consistently outperforms the\nbaselines. For security assessment, AUTOPROBE surpasses the state-of-the-art\nwhite-box approach by 18%. For compilability and functionality assessment,\nAUTOPROBE demonstrates its highest robustness to code complexity, with the\nperformance higher than the other approaches by up to 19% and 111%,\nrespectively. These findings highlight that dynamically selecting important\ninternal signals enables AUTOPROBE to serve as a robust and generalizable\nsolution for assessing the correctness of code generated by various LLMs."}
{"id": "2510.02991", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.02991", "abs": "https://arxiv.org/abs/2510.02991", "authors": ["Carlos Albuquerque", "Filipe F. Correia"], "title": "Tracing and Metrics Design Patterns for Monitoring Cloud-native Applications", "comment": "Accepted for publication in the EuroPLoP 2025 proceedings", "summary": "Observability helps ensure the reliability and maintainability of\ncloud-native applications. As software architectures become increasingly\ndistributed and subject to change, it becomes a greater challenge to diagnose\nsystem issues effectively, often having to deal with fragmented observability\nand more difficult root cause analysis. This paper builds upon our previous\nwork and introduces three design patterns that address key challenges in\nmonitoring cloud-native applications. Distributed Tracing improves visibility\ninto request flows across services, aiding in latency analysis and root cause\ndetection, Application Metrics provides a structured approach to instrumenting\napplications with meaningful performance indicators, enabling real-time\nmonitoring and anomaly detection, and Infrastructure Metrics focuses on\nmonitoring the environment in which the system is operated, helping teams\nassess resource utilization, scalability, and operational health. These\npatterns are derived from industry practices and observability frameworks and\naim to offer guidance for software practitioners."}
{"id": "2510.03005", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.03005", "abs": "https://arxiv.org/abs/2510.03005", "authors": ["Daniel Pinho", "Petr Pícha", "Filipe Correia", "Přemek Brada"], "title": "Patterns for Teaching Agile with Student Projects -- Team and Project Setup", "comment": "Accepted for publication in the EuroPLoP 2025 proceedings", "summary": "Higher education courses teaching about agile software development (ASD) have\nincreased in commonality as the ideas behind the Agile Manifesto became more\ncommonplace in the industry. However, a lot of the literature on how ASD is\napplied in the classroom does not provide much actionable advice, focusing on\nframeworks or even moving beyond the software development area into teaching in\nan agile way. We, therefore, showcase early work on a pattern language that\nfocuses on teaching ASD practices to university students, which stems from our\nown experiences as educators in higher education contexts. We present five\npatterns, specifically focused on team and project setup phase: Capping Team\nSize, Smaller Project Scope, Business Non-Critical Project, Self-assembling\nTeams, and Team Chooses Topic as a starting point for developing the overall\npattern language."}
{"id": "2510.03029", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.03029", "abs": "https://arxiv.org/abs/2510.03029", "authors": ["Debalina Ghosh Paul", "Hong Zhu", "Ian Bayley"], "title": "Investigating The Smells of LLM Generated Code", "comment": null, "summary": "Context: Large Language Models (LLMs) are increasingly being used to generate\nprogram code. Much research has been reported on the functional correctness of\ngenerated code, but there is far less on code quality.\n  Objectives: In this study, we propose a scenario-based method of evaluating\nthe quality of LLM-generated code to identify the weakest scenarios in which\nthe quality of LLM generated code should be improved.\n  Methods: The method measures code smells, an important indicator of code\nquality, and compares them with a baseline formed from reference solutions of\nprofessionally written code. The test dataset is divided into various subsets\naccording to the topics of the code and complexity of the coding tasks to\nrepresent different scenarios of using LLMs for code generation. We will also\npresent an automated test system for this purpose and report experiments with\nthe Java programs generated in response to prompts given to four\nstate-of-the-art LLMs: Gemini Pro, ChatGPT, Codex, and Falcon.\n  Results: We find that LLM-generated code has a higher incidence of code\nsmells compared to reference solutions. Falcon performed the least badly, with\na smell increase of 42.28%, followed by Gemini Pro (62.07%), ChatGPT (65.05%)\nand finally Codex (84.97%). The average smell increase across all LLMs was\n63.34%, comprising 73.35% for implementation smells and 21.42% for design\nsmells. We also found that the increase in code smells is greater for more\ncomplex coding tasks and for more advanced topics, such as those involving\nobject-orientated concepts.\n  Conclusion: In terms of code smells, LLM's performances on various coding\ntask complexities and topics are highly correlated to the quality of human\nwritten code in the corresponding scenarios. However, the quality of LLM\ngenerated code is noticeably poorer than human written code."}
{"id": "2510.03050", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.03050", "abs": "https://arxiv.org/abs/2510.03050", "authors": ["Rita Peixoto", "Filipe F. Correia", "Thatiane Rosa", "Eduardo Guerra", "Alfredo Goldman"], "title": "Refactoring Towards Microservices: Preparing the Ground for Service Extraction", "comment": "Accepted for publication in the EuroPLoP 2025 proceedings", "summary": "As organizations increasingly transition from monolithic systems to\nmicroservices, they aim to achieve higher availability, automatic scaling,\nsimplified infrastructure management, enhanced collaboration, and streamlined\ndeployments. However, this migration process remains largely manual and\nlabour-intensive. While existing literature offers various strategies for\ndecomposing monoliths, these approaches primarily focus on architecture-level\nguidance, often overlooking the code-level challenges and dependencies that\ndevelopers must address during the migration. This article introduces a\ncatalogue of seven refactorings specifically designed to support the transition\nto a microservices architecture with a focus on handling dependencies. The\ncatalogue provides developers with a systematic guide that consolidates\nrefactorings identified in the literature and addresses the critical gap in\nsystematizing the process at the code level. By offering a structured,\nstep-by-step approach, this work simplifies the migration process and lays the\ngroundwork for its potential automation, empowering developers to implement\nthese changes efficiently and effectively."}
{"id": "2510.03071", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.03071", "abs": "https://arxiv.org/abs/2510.03071", "authors": ["Facundo Molina", "Nazareno Aguirre", "Alessandra Gorla"], "title": "State Field Coverage: A Metric for Oracle Quality", "comment": null, "summary": "The effectiveness of testing in uncovering software defects depends not only\non the characteristics of the test inputs and how thoroughly they exercise the\nsoftware, but also on the quality of the oracles used to determine whether the\nsoftware behaves as expected. Therefore, assessing the quality of oracles is\ncrucial to improve the overall effectiveness of the testing process. Existing\nmetrics have been used for this purpose, but they either fail to provide a\ncomprehensive basis for guiding oracle improvement, or they are tailored to\nspecific types of oracles, thus limiting their generality.\n  In this paper, we introduce state field coverage, a novel metric for\nassessing oracle quality. This metric measures the proportion of an object's\nstate, as statically defined by its class fields, that an oracle may access\nduring test execution. The main intuition of our metric is that oracles with a\nhigher state field coverage are more likely to detect faults in the software\nunder analysis, as they inspect a larger portion of the object states to\ndetermine whether tests pass or not.\n  We implement a mechanism to statically compute the state field coverage\nmetric. Being statically computed, the metric is efficient and provides direct\nguidance for improving test oracles by identifying state fields that remain\nunexamined. We evaluate state field coverage through experiments involving 273\nrepresentation invariants and 249,027 test assertions. The results show that\nstate field coverage is a well-suited metric for assessing oracle quality, as\nit strongly correlates with the oracles' fault-detection ability, measured by\nmutation score."}
{"id": "2510.03178", "categories": ["cs.SE", "cs.CL"], "pdf": "https://arxiv.org/pdf/2510.03178", "abs": "https://arxiv.org/abs/2510.03178", "authors": ["Cuong Chi Le", "Minh V. T. Pham", "Cuong Duc Van", "Hoang N. Phan", "Huy N. Phan", "Tien N. Nguyen"], "title": "When Names Disappear: Revealing What LLMs Actually Understand About Code", "comment": null, "summary": "Large Language Models (LLMs) achieve strong results on code tasks, but how\nthey derive program meaning remains unclear. We argue that code communicates\nthrough two channels: structural semantics, which define formal behavior, and\nhuman-interpretable naming, which conveys intent. Removing the naming channel\nseverely degrades intent-level tasks such as summarization, where models\nregress to line-by-line descriptions. Surprisingly, we also observe consistent\nreductions on execution tasks that should depend only on structure, revealing\nthat current benchmarks reward memorization of naming patterns rather than\ngenuine semantic reasoning. To disentangle these effects, we introduce a suite\nof semantics-preserving obfuscations and show that they expose identifier\nleakage across both summarization and execution. Building on these insights, we\nrelease ClassEval-Obf, an obfuscation-enhanced benchmark that systematically\nsuppresses naming cues while preserving behavior. Our results demonstrate that\nClassEval-Obf reduces inflated performance gaps, weakens memorization\nshortcuts, and provides a more reliable basis for assessing LLMs' code\nunderstanding and generalization."}
{"id": "2510.03217", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.03217", "abs": "https://arxiv.org/abs/2510.03217", "authors": ["José Cambronero", "Michele Tufano", "Sherry Shi", "Renyao Wei", "Grant Uy", "Runxiang Cheng", "Chin-Jung Liu", "Shiying Pan", "Satish Chandra", "Pat Rondon"], "title": "Abstain and Validate: A Dual-LLM Policy for Reducing Noise in Agentic Program Repair", "comment": null, "summary": "Agentic Automated Program Repair (APR) is increasingly tackling complex,\nrepository-level bugs in industry, but ultimately agent-generated patches still\nneed to be reviewed by a human before committing them to ensure they address\nthe bug. Showing unlikely patches to developers can lead to substantial noise,\nwasting valuable developer time and eroding trust in automated code changes. We\nintroduce two complementary LLM-based policies to reduce such noise: bug\nabstention and patch validation policies. Bug abstention excludes bugs that the\nagentic APR system is unlikely to fix. Patch validation rejects patches that\nare unlikely to be a good fix for the given bug. We evaluate both policies on\nthree sets of bugs from Google's codebase, and their candidate patches\ngenerated by an internal agentic APR system. On a set of 174 human-reported\nbugs, removing bugs and patch trajectories rejected by our policies can raise\nsuccess rates by up to 13 percentage points and 15 percentage points,\nrespectively, and by up to 39 percentage points in combination. On null pointer\nexceptions and sanitizer-reported bugs with machine-generated bug reports,\npatch validation also improves average single-sample success rates. This\ntwo-policy approach provides a practical path to the reliable, industrial-scale\ndeployment of agentic APR systems."}
